parser:
do;

$include (glob.lit)

    f$op: procedure (p$fn, mode) byte external;
        declare p$fn address;
        declare mode byte;
    end f$op;

    f$rd: procedure external;
    end f$rd;

    f$cl: procedure (f$id) external;
        declare f$id byte;
    end f$cl;

    /* state variables */
    declare cmd byte;     /* constant representing the commmand */
    declare a1 (64) byte;  /* argument 1 */
    declare a2 (64) byte;  /* argument a2 */

    /* opens the file, returns 0 on success */
    parser$init: procedure (p$fn) byte public;
        declare p$fn address;
        declare fn based p$fn byte;
        return f$open(p$fn, F$READ);
    end parser$init;

    /* reads one command and fills cmd, a1 and a2
     * returns 0 if a command has been read
     * returns 0FFH on EOF (and closes the file) */
    advance: procedure byte public;
    end advance;

    command$type: procedure byte public;
        return cmd;
    end command$type;

    arg$1: procedure address public;
        return .a1;
    end arg$1;
    
    arg$2: procedure address public;
        return .a2;
    end arg$2;
end parser;
