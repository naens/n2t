parse:
do;
    pr$buf: procedure(a) external;
        declare a address;
    end pr$buf;

    wr$con: procedure(c) external;
       declare c byte;
    end wr$con;

    openr: procedure(fcb, scnt, stat) external;
        declare (fcb, scnt, stat) address;
    end openr;

    drlin: procedure(fcb, sbuf, scnt, txt, cnt, stat) external;
        declare (fcb, sbuf, scnt, txt, cnt, stat) address;
    end drlin;

    closr: procedure(fcb, stat) external;
        declare (fcb, stat) address;
    end closr;

    str$cpy: procedure(p$src, p$dest, len) external;
        declare p$src address;
        declare p$dest address;
        declare len byte;
    end str$cpy;

    nmout: procedure (v, b, l, ba, w) external;
        declare (v, ba) address;
        declare (b, l, w) byte;
    end nmout;

    is$space: procedure(c) byte;
        declare c byte;
        if c = 20H or c = 09H then
            return 1;
        else
            return 0;
    end is$space;

    printable: procedure(c) byte;
        declare c byte;
        if c > 20H and c < 7FH then
            return 1;
        else
            return 0;
    end printable;

    label$len: procedure(pl) byte;
        declare pl address;
        declare l based pl byte;
        declare r byte;
        r = 0;
        do while l(r) <> ')' and printable(l(r));
            r = r + 1;
        end;
        return r;
    end label$len;

    pr$len: procedure(p$l) byte;
        declare p$l address;
        declare l based p$l byte;
        declare r byte;
        r = 0;
        do while printable(l(r));
            r = r + 1;
        end;
        return r;
    end pr$len;

    declare ptfcb address data (005CH);
    declare tfcb based ptfcb byte;
    declare ptbuff address data (0080H);
    declare tbuff based ptbuff byte;

    declare scnt address;
    declare dstat address;

    open$file: procedure byte public;
        call openr(.tfcb, .scnt, .dstat);
        return dstat;
    end open$file;

    file$close: procedure byte public;
        call closr(.tfcb, .dstat);
        return dstat;
    end file$close;

    read$token: procedure(pbuf) byte public;
        declare pbuf address;
        declare buf based pbuf byte;
        declare count address;
        declare line (128) byte;
        declare i byte;
        declare len byte;
        call drlin(.tfcb, .tbuff, .scnt, .line, .count, .dstat);
        if dstat <> 0 then
            return 0;
        do while dstat = 0;
            i = 0;
            do while is$space(line(i));
                i = i + 1;
            end;
            if line(i) <> '/' and i < count - 2 then
            do;
                if line(i) = '(' then
                do;
                    len = label$len(.line(i + 1));
                    call str$cpy(.line(i + 1), .buf, len);
                    buf(len) = '$';
                    return 'L';
                end;
                else if line(i) = '@' then
                do;
                    len = pr$len(.line(i + 1));
                    call str$cpy(.line(i + 1), .buf, len);
                    buf(len) = '$';
                    return 'A';
                end;
                else
                do;
                    len = pr$len(.line(i));
                    call str$cpy(.line(i), .buf, len);
                    buf(len) = '$';
                    return 'C';
                end;
            end;
            call drlin(.tfcb, .tbuff, .scnt, .line, .count, .dstat);
        end;
        return 0;
    end read$token;

end parse;
