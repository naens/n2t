bas$asm:
do;
    pr$buf: procedure(a) external;
        declare a address;
    end pr$buf;

    wr$con: procedure(c) external;
        declare c byte;
    end wr$con;

    pr0str: procedure(p$str) external;
        declare p$str address;
    end pr0str;

    nmout: procedure (v, b, l, ba, w) external;
        declare (v, ba) address;
        declare (b, l, w) byte;
    end nmout;

    open$file: procedure byte external;
    end open$file;

    file$close: procedure byte external;
    end file$close;

    get$fn: procedure(p$buf) external;
        declare p$buf address;
    end get$fn;

    read$token: procedure(pbuf) byte external;
        declare pbuf address;
    end read$token;

    a$instr: procedure(p$src, p$dest) external;
        declare (p$src, p$dest) address;
    end a$instr;

    c$instr: procedure(p$src, p$dest) external;
        declare (p$src, p$dest) address;
    end c$instr;

    opw$fn: procedure(pfn) byte external;
        declare pfn address;
    end opwfn;

    fwstr: procedure(pfn) byte external;
        declare pfn address;
    end fwstr;

    fwln: procedure(pfn) byte external;
        declare pfn address;
    end fwln;

    clwf: procedure byte external;
    end clwf;


    declare buf(128) byte;
    declare type byte;
    declare out(17) byte;
    declare fn(11) byte;

    call get$fn(.fn);
    fn(8) = 'H';
    fn(9) = 'C';
    fn(10) = 'K';

    if opw$fn(.fn) = 0 and open$file = 0 then
    do;
        type = read$token(.buf);
        do while type <> 0;
            call pr$buf(.('    $'));
	    call wr$con(type);
            call wr$con(':');
            call wr$con(09H);
            call pr0str(.buf);
            call wr$con(09H);
            if type = 'A' then
            do;
                call a$instr(.buf, .out);
                call pr0str(.out);
                call fwln(.out);
            end;
            else if type = 'C' then
            do;
                call c$instr(.buf, .out);
                call pr0str(.out);
                call fwln(.out);
            end;
            else if type = 'L' then
            do;
                ;
            end;
            call pr$buf(.(0DH, 0AH, '$'));
            type = read$token(.buf);
        end;
        if type = 0 then
        do;
            if file$close <> 0 then
                call pr$buf(.('ERROR CLOSING FILE$'));
        end;
        else
            call pr$buf(.('ERROR READING FILE$'));
    end;
    else
        call pr$buf(.('ERROR OPENING THE FILE$'));
    if clwf <> 0 then
        call pr$buf(.('ERROR CLOSING WRITE FILE$'));
end bas$asm;
