tools:
do;
    pr$buf: procedure (addr) external;
        declare addr address;
    end pr$buf;

    wr$con: procedure (ch) external;
        declare ch byte;
    end wr$con;

    str$eq: procedure(p$s1, p$s2) byte public;
        declare p$s1 address;
        declare s1 based p$s1 byte;
        declare p$s2 address;
        declare s2 based p$s2 byte;
        declare i byte;
        i = 0;
        do while s1(i) = s2(i) and s1(i) <> 0 and s2(i) <> 0;
            i = i + 1;
        end;
        if s1(i) = 0 and s2(i) = 0 then
            return 1;
        else
            return 0;
    end str$eq;

    str$to$int: procedure(s) byte public;
        declare s address;
        declare n byte initial(0);
        do while s(0) <> 0;
            n = n * 10 + s(0) - '0';
            s = s + 1;
        end;
        return n;
    end str$to$int;

    declare mem$ptr address initial(0);
    declare MEM$SZ literally '0100h';
    declare mem$buf(MEM$SZ) byte;

    /* Allocates memory from mem$buf. */
    /* Returns address of allocated space of n bytes. */
    /* If not enough memory, returns 0 */
    mem$alloc: procedure(n) address public;
        declare n byte;
        declare res address;
        if mem$ptr + n > MEM$SZ then
            return 0;
        res = .mem$buf(mem$ptr);
        mem$ptr = mem$ptr + n;
        return res;
    end mem$alloc;
end tools;
