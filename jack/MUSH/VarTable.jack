class VarTable {

    static integer TAB_SZ;
    field Array table;

    function integer hash(String key) {
        var integer sum;
        var integer i;
        let i = 0;
        let sum = 0;
        while (i < key.length()) {
            let sum = (sum*10) + key.charAt(i);
            let i = i + 1;
        }
        return sum & 15;
    }

    constructor VarTable new() {
        var integer i;
        let TAB_SZ = 16;
        let table = Array.new(TAB_SZ);
        let i = 0;
        while (i < TAB_SZ) {
            let table[i] = 0;
            let i = i + 1;
        }
        return this;
    }

    method VarTableNode getNode(List list, String key) {
        var VarTableNode node;
        while (~(list = 0)) {
            let node = list.get();
            if (Tools.stringEquals(node.getKey(), key)) {
                return node;
            }
            let list = list.getNext();
        }
        return 0;
    }

    method void put(String key, integer value) {
        var List list;
        var integer h;
        var VarTableNode node;

        let h = VarTable.hash(key);
        let list = table[h];
        if (list = 0) {
            let node = VarTableNode.new(key);
            let list = List.new(node);
            let table[h] = list;
        } else  {
            let node = getNode(list, key);
            if (node = 0) {
                let node = VarTableNode.new(key);
            }
            let table[h] = list.prepend(node);
        }
        do node.push(value);
        return;
    }

    /* return VarTableNode or -1 if not found */
    method integer get(String key) {
        var List list;
        var integer h;
        var VarTableNode node;

        let h = VarTable.hash(key);
        let list = table[h];

        let node = getNode(list, key);
        if (node = 0) {
            return -1;
        } else {
            return node.getValue();
        }
    }

    method void popBlock(integer blockId) {
        var List list;
        var integer i;
        var boolean first;
        var boolean needAdvance;
        var List prev;
        var List next;
        var VarTableNode node;
        let i = 0;
        while (i < TAB_SZ) {
            let first = true;
            let list = table[i];
            while (~(list = 0)) {
                let node = list.get();
                let needAdvance = true;
                if (node.getValue() = blockId) {
                    do node.pop();
                    if (node.isEmpty()) {
                        let next = list.getNext();
                        if (first) {
                            let table[i] = next;
                        } else {
                            do prev.setNext(next);
                        }
                        do node.dispose();
                        let list = list.deleteFirst();
                        let needAdvance = false;
                    }
                }
                if (needAdvance) {
                    let prev = list;
                    let list = list.getNext();
                    let first = false;
                }
            }
            let i = i + 1;
        }
        return;
    }

    method void dispose() {
        var List list;
        var integer i;
        var VarTableNode node;
        let i = 0;
        while (i < TAB_SZ) {
            let list = table[i];
            while (~(list = 0)) {
                let node = list.get();
                do node.dispose();
                let list = list.deleteFirst();
            }

            let i = i + 1;
        }
        do table.dispose();
        do Memory.deAlloc(this);
        return;
    }

}
