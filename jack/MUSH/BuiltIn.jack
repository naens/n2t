class BuiltIn {
    /* built-in functions */

    function Value execByName(String name, IdentMap identMap,
             List values, Item item) {
        if (Tools.stringEqConst(name, "type")) {
            do BuiltIn.type(values);
            return 0;
        }
        if (Tools.stringEqConst(name, "list")) {
            do BuiltIn.list(identMap, item);
            return 0;
        }
        if (Tools.stringEqConst(name, "quit")) {
            return Const.QUIT();
        }
        if (Tools.stringEqConst(name, "help")) {
            do Help.loop();
            return 0;
        }
        if (Tools.stringEqConst(name, "clear")) {
            do Display.clear();
            return 0;
        }
        /* TODO: assign, ?exec/run/eval, ?erase/del/unset */
        return 0;
    }

    /* type function: types the (first) argument on the display */
    function void type(List values) {
        var Value val;
        if (values = 0) {
            do Display.printConstln("type: no expression given");
            return;
        }
        let val = values.get();
//        do Display.printConst("TYPE: ");
        do val.println();
        do val.dispose();
        return;
    }

    /* list variables of every block from current to 0 */
    function void list(IdentMap identMap, Item item) {
        var integer blockId;
        var integer tmpBlockId;
        var Item tmpItem;

        let blockId = item.getBlockId();
        let tmpItem = item;
        let tmpBlockId = tmpItem.getBlockId();
        while (~(blockId = 0)) {
            do BuiltIn.listByBlockId(identMap, blockId);
            while (tmpBlockId = blockId) {
                let tmpItem = tmpItem.getParent();
                let tmpBlockId = tmpItem.getBlockId();
            }
            let blockId = tmpBlockId;
        }
        do BuiltIn.listByBlockId(identMap, 0);
        return;
    }

    /* list function: list variable names in IdentMap with blockId */
    function void listByBlockId(IdentMap identMap, integer blockId) {
        var Array table;
        var List list;
        var integer i;
        var integer size;
        var IdentMapNode node;
        var Element element;
        var string name;
        var integer type;

        let table = identMap.getTable();
        let i = 0;
        let size = identMap.getTableArraySize();
        while (i < size) {
            let list = table[i];
            while (~(list = 0)) {
                let node = list.get();
                if (node.getBlockId() = blockId) {
                    let name = node.getName();
                    do Display.printString(name);
                    do Display.printConst(": ");
                    let element = node.getElement();
                    let type = element.getType();
                    do AstPrint.type(type);
                    do Display.newline();
                }
                let list = list.getNext();
            }
            let i = i + 1;
        }
        return;
    }

}
