#+TITLE: MUSH

[[mush.png]]


* Overview
MUSH (Moronic Unexciting Shell) is a small shell built on top of the Jack
Operating System.  It can be used to define and execute commands and
procedures.

Here is a video demonstration: [[https://youtu.be/ghEs8mPOAZk][demo]].

* Built-in Commands
The built in commands serve as a way for the user to interact with the
system: print results, list available variables, and similar.

 - ~type <expression>~: display the value of an expression
 - ~list~: display the names of available variables
 - ~help~: run help program, which explains how to use the system
 - ~delete <string expression>~: undefine a variable
 - ~clear~: completely erases everything on the screen and positions the
 cursor in the left top corner
 - ~quit~: exit from MUSH


* Language Description
In MUSH a new line separates items and statements (similar to ~sh~ in Linux).
In the descrition of the language new lines are represented by a comma
(~,~).  Lines cannot be separated and cannot be combined.

** Varable Declarations
~var_decl = declare ident type~
~ident: [a-z][a-z$0-9]*~
~type: integer | boolean | string~

** Expressions
Every expression return any of the 3 types: integer, string and boolean.
There is the hierarchy of operators:
 - mult-type: ~*~, ~/~, ~mod~
 - add-type: ~+~, ~-~
 - integer comparison (/rel_op/)
 - boolean: ~and~, ~or~

Unary ~-~ must be between parentheses if it is an argument of a procedure
call, is not before any arithmetic operator.  However it can follow
relational and boolean operators and assignment.  For example ~a=-1~ and
~type a = -1~ are legal, but ~type -1~ isn't (because in this case the unary
~-~ can be interpreted as a binary ~-~).

#+BEGIN_SRC
expr = [not] log_expr { (and | or ) expr }
rel_op = "<" | ">" | "<=" | ">=" | "<>" | "="
log_expr = true | false | (arithm [ rel_op arithm ])
arithm = term {( "+" | "-" ) term }
term = factor { ( "*" | "/" | mod ) factor }
call = ident expr {expr}
factor= [ "-" ]  number | string | ident | ( "(" call | expr ")")
#+END_SRC

*** Intgeger Expressions
Integer operators are +, -, /, *, and mod.

*** Boolean Expressions
Returned as a result of an evaluation of a logical expression, relational
expression, boolean variable or a procedure call that returns a boolean.

*** String Expressions
Only procedures, variables and string literals can return a string value.
String literals are written 'example1' or 'example''2' or '', where the
two quote chacters are interpreted as one, if inside a string literal.

** Statements

*** Assignments
~assign = ident "=" expression~

The variable and the expression must be of the same type, otherwise the
value doesn't get assigned.

*** Procedure Calls
~call = ident {expr}~

Here expressions cannot start with a "-" (unary minus).


** Conditions
#+BEGIN_SRC
cond = if_stmt unit {else_if_stmt unit} [else unit]
if_stmt = "if" expr "then"
else_if_stmt = "else" if_stmt
#+END_SRC

** Blocks and Procedures
#+BEGIN_SRC
declaration =  var_decl | proc_decl
unit = assignment | call | block | cond | return_stmt
block = block_stmt, {declaration, } {unit,} end_stmt,
block_stmt = doblock_stmt | dowhile_stmt | doiter_stmt
return_stmt = "return" expr"
end_stmt = "end" [ident]"
#+END_SRC

The identifier of the end statement is optional and does not have any
purpose. 

*** Do Blocks
~doblock_stmt = "do"~

Just usual blocks.  A way to declare variables and procedures in the middle
of a block.

*** Do While
~dowhile_stmt = "do" "while" expr~

Repeats the block while the expression evaluates to true.  When it stop
evaluating to true and evaluates to false, the internal block is no longer
executed and the execution continues with next items if any.

*** Iterative Do
~doiter_stmt = "do" ident "=" expr "to" expr ["by" expr]~

Iterates over a predefined variable by assigning a value and modifing it by
a value, which is 1 by default.  It can be used if an action must be
repeated several times.

*** Procedures
#+BEGIN_SRC
proc_decl = proc_stmt, {declaration,} {unit,} end_stmt,
proc_stmt = declare ( ident {ident} ) [type]
#+END_SRC

Just normal procedures.  The return type if optional.  A procedure with a
return type cannot terminate without a return value.  A procedure without a
return type cannot be used inside an expression, only independent calls are
OK.

** Examples

*** Fibonacci function
#+BEGIN_SRC
MUSH>declare (fib n) integer
       declare n integer
       if n < 2 then
         return n
       else
         return (fib n-1) + (fib n-2)
     end fib
MUSH>type (fib 4)
3
MUSH>type (fib 7)
13
#+END_SRC

*** Scope test
Prints whether the scope is lexical or dynamic.
#+BEGIN_SRC
MUSH>declare s string
MUSH>declare (proc)
       type s
     end proc
MUSH>declare (scope)
       declare s string
       s='dynamic'
       proc
     end scope
MUSH>s='lexical'
MUSH>scope
lexical
#+END_SRC

*** Multiplication function
Multiplies two numbers and returns the result.  Uses a SICP-like algorithm.
#+BEGIN_SRC
MUSH>declare (mult a b) integer
       declare a integer
       declare b integer
       declare (rec a b acc) integer
         declare a integer
         declare b integer
         declare acc integer
         if b = 0 then
           return acc
         else if b-b/2*2 = 0 then
           return (rec 2*a b/2 acc)
         else
           return (rec a b-1 acc+a)
       end rec
       return (rec a b 0)
     end mult
MUSH>type (mult 3 6)
18
MUSH>type (mult 17 77)
1309
MUSH>type (mult 20 0)
0
MUSH>type (mult 0 100)
0
#+END_SRC

* How the Scope Rules work

Here is a brief description of how variables get resolved.  MUSH is my first
attempt at implementing lexical scoping.  Before implementing MUSH I had an
idea of how lexical scoping could be implemented in an interpreted language. 
It's different from method of chapter 3 of SICP, where a variable is looked up
in every frame.  It just didn't seem right.  For example, in a recursive
procedure, if the variable is not in the current frame, it won't be there
until we look outside of the procedure.

So I had an idea how to do it.  Unfortunately, I don't have a formal proof
that the way I implemented it really works.  But for me it seemed good
enough, and it also worked when I did the tests.

There are two steps.

1. The first step is to give every block an identifier.  A block is a block
with a ~do~ or the body of a procedure.  Then, for every variable, we assign
the block where it was declared.  In order to do this a hashtable called
~VarTable~ is used.  It maps variable names to a stack of block ids.  So
this is the outline of how it works:
 - on block enter: generation of a new block id, and save it in the AST
 - on variable declaration: push the new block id in the stack of the
   variable
 - on variable in the execution part of the block; the block id of the
   variable is the block id on top in ~VarTable~
 - on block exit: pop all variables from ~VarTable~, where block id is the
   current block id.

2. During the execution: the values of variables are stored in a hashtable
called ~IdentMap~.  It maps a pair of variable (name, block i)d to a stack of
values.
 - on block enter: create new values and push them to the ~IdentMap~.  If
   it's a procedure call, initialize the variables with the values of given
   parameters.
 - on execution statements: just get the variables from the ~IdentMap~.  The
   correct variables should be on the top.
 - on block exit: pop all variables with the current block id that are on
   top.

I haven't said anything about how procedures are handled in these tables yet. 
Everything is more or less easy without procedures.  Procedures make things
more complicated because they don't behave like normal variables: they have
to be there in the tables because they can hide a variable or a variable can
be hidden by them, on the other hand they can't be change during execution.

So this is what I do.  During the first step, I put them both in the
~VarTable~ and in the ~IdentMap~.  And the ~IdentMap~ does not contain a
normal stack of variables, but a link to the AST node.  So that the
procedure can be executed when it's encountered during the execution.

* Other
The source code is available at:
https://github.com/naens/n2t/tree/master/jack/MUSH.

The license for this project is GPLv3.
