/* AST Selector functions */
class AstSel {

    /* variable selectors
     * [var_decl: declare ident type]
     */
    function String varName(Item varDecl) {
        var Item item;
        var List subItems;
        let subItems = varDecl.getSubItems(); /* declare */
        let subItems = subItems.getNext();    /* ident */
        let item = subItems.get();
        return item.getStringValue();
    }

    /* return the type of the variable
     * [var_decl: declare ident type]
     */
    function integer varType(Item varDecl) {
        var List subItems;
        var Item item;
        let subItems = varDecl.getSubItems(); /* declare */
        let subItems = subItems.getNext();    /* ident */
        let subItems = subItems.getNext();    /* type */
        let item = subItems.get();
        if (item.getType() = Const.RW_INTEGER()) {
            return Const.T_INTEGER();
        }
        if (item.getType() = Const.RW_STRING()) {
            return Const.T_STRING();
        }
        if (item.getType() = Const.RW_BOOLEAN()) {
            return Const.T_BOOLEAN();
        }
        return Const.ILLEGAL();
    }

    /* returns the rest of the variable declaration
     * [var_decl: declare ident type]
     */
    function List varRest(Item varDecl) {
        var List subItems;
        let subItems = varDecl.getSubItems(); /* declare */
        return subItems.getNext();
    }

    /* function selectors
     * [fun_decl: [fun_stat: declare ( ident {ident} ) ...] ...]
     */
    function String funName(Item funDecl) {
        var List subItems;
        var Item item;
        let subItems = funDecl.getSubItems();
        let item = subItems.get(); /* fun_stat */
        let subItems = item.getSubItems();
        while ((~(item.getType() = Const.IDENT()))) {
            let subItems = subItems.getNext();
            let item = subItems.get();
        }
        return item.getStringValue();
    }

    /* returns fun_stat of a function
     * [fun_decl: [fun_stat: declare ( ident {ident} ) ...] ...]
     */
    function List funArgs(Item funDecl) {
        var List subItems;
        var Item item;
        let subItems = funDecl.getSubItems();
        let item = subItems.get(); /* fun_stat */
        let subItems = item.getSubItems();
        while ((~(item.getType() = Const.IDENT()))) {
            let subItems = subItems.getNext();
            let item = subItems.get();
        }
        return subItems.getNext();
    }

    /* returns declarations, units and end of a function
     * [fun_decl: fun_stat {declaration} {unit} end_stat]
     */
    function List funRest(Item funDecl) {
        var List subItems;
        let subItems = funDecl.getSubItems(); /* fun_stat */
        return subItems.getNext();
    }

    /* returns block_stat of a block
     * [bock: block_stat ...]
     */
    function Item blockStat(Item block) {
        var List subItems;
        let subItems = block.getSubItems();
        return subItems.get();
    }

    /* returns declarations, units and end of a block
     * [block: block_stat {declaration} {unit} end_stat]
     */
    function List blockRest(Item block) {
        var List subItems;
        let subItems = block.getSubItems();
        return subItems.getNext();
    }

    function Item elseStatIf(Item elseStat) {
        var List subItems;
        let subItems = elseStat.getSubItems();
        let subItems = subItems.getNext();
        return subItems.get();
    }

    function String endName(Item endStat) {
        var List subItems;
        var Item ident;
        let subItems = endStat.getSubItems();
        let subItems = subItems.getNext();
        if (subItems = 0) {
            return 0;
        }
        let ident = subItems.get();
        return ident.getStringValue();
    }

    /* Terminal Selectors */
    function String identName(Item ident) {
        return ident.getStringValue();
    }

}
