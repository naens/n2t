class Eva {
    /* 2-pass Evaluator
     * 1st pass: determine the block for each variable
                 link identifier objects to function if is a function
     * 2nd pass: execute the item
     *
     * The evaluator needs to keep the variable values, they are stored
     * in object fields.
     */
    
    field IdentMap identMap;

    field integer blockId;

    constructor Eva new() {
        let identMap = IdentMap.new();
        return this;
    }

    /* pass1: variable declaration: save in block id in vartable
     *        procedure declaration: save in block id in vartable
     *                               save in identmap
     *        variable in code: set block id from vartable
     *        procedure in code: set procedure node from identmap
     * !! when identifier in code: first find block id
     *                             then check identmap (present => proc)
     *                             if procedure: link occurence to node
     */
    method void pass1rec(VarTable varTable, Item item) {
        var List subItems;
        var String funName;
        if (item.isTerminal()) {
            if (item.getType() = Const.IDENT()) {
                do item.setBlockId(blockId);
            }
        } else {
            if (item.getType() = Const.FUN_DECL()) {
                let funName = AstSel.funName(item);
                let blockId = blockId + 1;
                /* set blockId for variables (? only for debug ?) */
                do pass1rec(varTable, AstSel.funStat(item));
                do identMap.putProc(funName, blockId, item);
                let subItems = AstSel.funRest(item);
            } else {
                let subItems = item.getSubItems();
                if (item.getType() = Const.DO_BLOCK()
                  | item.getType() = Const.DO_ITER()
                  | item.getType() = Const.DO_WHILE()) {
                    let blockId = blockId + 1;
                }
            }
            while (~(subItems = 0)) {
                do pass1rec(varTable, subItems.get());
                let subItems = subItems.getNext();
            }
        }
        return;
    }

    method void pass1(Item item) {
        var VarTable varTable;
        let varTable = VarTable.new();
        let blockId = 0;
        do pass1rec(varTable, item);
        do varTable.dispose();
        return;
    }

    method Value execute(Item item) {
        /* TODO */
        return 0;
    }

    /* execute method: performs the two passes */
    method Value evaluate(Item item) {
        do pass1(item);
        return execute(item);
    }

    method void dispose() {
        do identMap.dispose();
        do Memory.deAlloc(this);
        return;
    }

}
