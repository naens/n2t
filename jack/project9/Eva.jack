class Eva {
    /* 2-pass Evaluator
     * 1st pass: determine the block for each variable
                 link identifier objects to function if is a function
     * 2nd pass: execute the item
     *
     * The evaluator needs to keep the variable values, they are stored
     * in object fields.
     */
    
    field IdentMap identMap;

    constructor Eva new() {
        let identMap = IdentMap.new();
        return this;
    }

    /* pass1: variable declaration: save in block id in vartable
     *        procedure declaration: save in block id in vartable
     *                               save in identmap
     *        variable in code: set block id from vartable
     *        procedure in code: set procedure node from identmap
     * !! when identifier in code: first find block id
     *                             then check identmap (present => proc)
     *                             if procedure: link occurence to node
     */
    method void pass1(Item item) {
        var VarTable varTable;
        let varTable = VarTable.new();
        /* TODO */
        do varTable.dispose();
        return;
    }

    method Value execute(Item item) {
        /* TODO */
        return 0;
    }

    /* execute method: performs the two passes */
    method Value evaluate(Item item) {
        do pass1(item);
        return execute(item);
    }

    method void dispose() {
        do identMap.dispose();
        do Memory.deAlloc(this);
        return;
    }

}
