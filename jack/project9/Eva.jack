class Eva {
    /* 2-pass Evaluator
     * 1st pass: determine the block for each variable
                 link identifier objects to function if is a function
     * 2nd pass: execute the item
     *
     * The evaluator needs to keep the variable values, they are stored
     * in object fields.
     */
    
    field IdentMap identMap;

    field integer blockId;

    constructor Eva new() {
        let identMap = IdentMap.new();
        return this;
    }

    /* pass1: variable declaration: save in block id in vartable
     *        procedure declaration: save in block id in vartable
     *                               save in identmap
     *        variable in code: set block id from vartable
     *        procedure in code: set procedure node from identmap
     * !! when identifier in code: first find block id
     *                             then check identmap (present => proc)
     *                             if procedure: link occurence to node
     */
    method void pass1rec(VarTable varTable, Item item) {
        var String identName;
        var String varName;
        var String funName;
        var integer identBlockId;
        var integer type;
        var List subItems;
        if (item.isTerminal()) {
            if (item.getType() = Const.IDENT()) {
                let identName = AstSel.identName(item);
//                do Display.printConst("pass1rec: term name=");
//                do Display.printString(identName);
                let identBlockId = varTable.get(identName);
                if (identBlockId = -1) {
                    if ((blockId = 0) & (~(identMap.get(identName, 0) = 0))) {
                        do item.setBlockId(0);
//                        do Display.printConstln(" blockId=0 (from identMap)");
                    } else {
                        do item.setBlockId(-1);
//                        do Display.printConstln(" blockId=undef");
                    }
                } else {
                    do item.setBlockId(identBlockId);
/*
                    do Display.printConst(" blockId=");
                    do Display.printInt(identBlockId);
                    do Display.newline();
*/
                }
            }
            return;
        } else {
            if (item.getType() = Const.VAR_DECL()) {
                let varName = AstSel.varName(item);
                let type = AstSel.varType(item);
/*
                do Display.printConst("pass1rec: var_decl name=");
                do Display.printString(varName);
                do Display.printConst(" blockId=");
                do Display.printInt(blockId);
                do Display.printConst(" type=");
                do AstPrint.type(type);
                do Display.newline();
*/
                do pass1rec(varTable, AstSel.varRest(item));
                do identMap.putVar(varName, blockId, type);
                do varTable.put(varName, blockId);
                do item.setBlockId(blockId);
                return;
            } else {
                if (item.getType() = Const.FUN_DECL()) {
                    let funName = AstSel.funName(item);
                    let blockId = blockId + 1;
                    do pass1rec(varTable, AstSel.funStat(item));
                    do identMap.putProc(funName, blockId, item);
                    let subItems = AstSel.funRest(item);
                    do item.setBlockId(blockId);
                } else {
                    if (item.getType() = Const.DO_BLOCK()
                      | item.getType() = Const.DO_ITER()
                      | item.getType() = Const.DO_WHILE()) {
                        do pass1rec(varTable, AstSel.blockStat(item));
                        let blockId = blockId + 1;
                        do item.setBlockId(blockId);
                        let subItems = AstSel.blockRest(item);
                    } else {
                        let subItems = item.getSubItems();
                    }
                }
            }
            while (~(subItems = 0)) {
                do pass1rec(varTable, subItems.get());
                let subItems = subItems.getNext();
            }
            if (item.getType() = Const.END_STAT()) {
                do varTable.popBlock(blockId);
            }
            return;
        }
    }

    method void pass1(Item item) {
        var VarTable varTable;
        let varTable = VarTable.new();
        let blockId = 0;
        do pass1rec(varTable, item);
        do varTable.dispose();
        return;
    }

    method Value execute(Item item) {
        /* TODO */
        return item;
    }

    /* execute method: performs the two passes */
    method Value evaluate(Item item) {
        do pass1(item);
        do AstPrint.item(identMap, item);
        return execute(item);
    }

    method void dispose() {
        do identMap.dispose();
        do Memory.deAlloc(this);
        return;
    }

}
