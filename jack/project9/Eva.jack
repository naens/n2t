class Eva {
    /* 2-pass Evaluator
     * 1st pass: determine the block for each variable
                 link identifier objects to function if is a function
     * 2nd pass: execute the item
     *
     * The evaluator needs to keep the variable values, they are stored
     * in object fields.
     */
    
    field IdentMap identMap;

    field integer lastBlockId;
    field integer currBlockId;

    field List blockIdStack;

    method void nextBlockId() {
//        do Display.printConstln("nextBlockId");
        let lastBlockId = lastBlockId + 1;
        let blockIdStack = blockIdStack.prepend(lastBlockId);
        let currBlockId = lastBlockId;
        return;
    }

    method void popBlockId() {
//        do Display.printConstln("popBlockId");
        let blockIdStack = blockIdStack.deleteFirst();
        let currBlockId = blockIdStack.get();
        return;
    }

    constructor Eva new() {
        let identMap = IdentMap.new();
        let lastBlockId = 0;
        let blockIdStack = List.new(lastBlockId);
        let currBlockId = 0;
        return this;
    }

    /* returns true if variable already declared in ident map
     * + print error message
     */
    function boolean checkDeclared(IdentMap identMap,
      String name, integer blockId) {
        var Element element;
        let element = identMap.get(name, blockId);
        if (element = 0) {
            return false;
        } else {
            do Display.printConst("Identifier with name ");
            do Display.printString(name);
            do Display.printConstln(" is already declared in the block.");
            return true;
        }
    }

    /* pass1: variable declaration: save in block id in vartable
     *        procedure declaration: save in block id in vartable
     *                               save in identmap
     *        variable in code: set block id from vartable
     *        procedure in code: set procedure node from identmap
     * !! when identifier in code: first find block id
     *                             then check identmap (present => proc)
     *                             if procedure: link occurence to node
     & return value: true on success, false on error
     */
    method boolean pass1rec(VarTable varTable, Item item) {
        var String identName;
        var String varName;
        var String procName;
        var integer identBlockId;
        var integer endBlockId;
        var integer tmp;
        var integer type;
        var List subItems;
        var List procArgs;
        var Item procIdent;
        var Item arg;
        var Item subItem;
        if (item.isTerminal()) {
            if (item.getType() = Const.IDENT()) {
                let identName = AstSel.identName(item);
                let identBlockId = varTable.get(identName);
                if (identBlockId = (-1)) {
                    if (~(identMap.get(identName, 0) = 0)) {
                        do item.setBlockId(0);
                    } else {
                        do item.setBlockId(-1);
                        do Display.printConst("Identifier ");
                        do Display.printString(identName);
                        do Display.printConstln(" undefined.");
                        return false;
                    }
                } else {
                    do item.setBlockId(identBlockId);
                }
            }
            return true;
        }

        if (item.getType() = Const.VAR_DECL()) {
            let varName = AstSel.varName(item);
            let type = AstSel.varType(item);
            if (currBlockId > 0) {
                if (Eva.checkDeclared(identMap, varName, currBlockId)) {
                    return false;
                }
            }
            do pass1rec(varTable, AstSel.varRest(item));
            do identMap.putVar(varName, currBlockId, type);
            do varTable.put(varName, currBlockId);
            do item.setBlockId(currBlockId);
            return true;
        }

        if (item.getType() = Const.PROC_DECL()) {
            let procName = AstSel.procName(item);
            if (currBlockId > 0) {
                if (Eva.checkDeclared(identMap, procName, currBlockId)) {
                    return false;
                }
            }
            do varTable.put(procName, currBlockId);
            do identMap.putProc(procName, currBlockId, item);
            let procIdent = AstSel.procIdent(item);
            do procIdent.setBlockId(currBlockId);
            do nextBlockId();
            let procArgs = AstSel.procArgs(item);
            while (~(procArgs = 0)) {
                let arg = procArgs.get();
                do arg.setBlockId(currBlockId);
                let procArgs = procArgs.getNext();
            }
            let subItems = AstSel.procRest(item);
            do item.setBlockId(currBlockId);
        } else {
            if ((item.getType() = Const.DO_BLOCK())
              | ((item.getType() = Const.DO_ITER())
                 | (item.getType() = Const.DO_WHILE()))) {
                do pass1rec(varTable, AstSel.blockStat(item));
                do nextBlockId();
                do item.setBlockId(currBlockId);
                let subItems = AstSel.blockRest(item);
            } else {
                let subItems = item.getSubItems();
            }
        }
        while (~(subItems = 0)) {
            if (~pass1rec(varTable, subItems.get())) {
                return false;
            }
            let subItems = subItems.getNext();
        }
        if (item.getType() = Const.END_STAT()) {
//                let endBlockId = topBlockId();
//                do Display.printConstln("set end blockId:");
//                do Display.printInt(endBlockId);
//                do Display.newline();
            do item.setBlockId(currBlockId);
            do varTable.popBlock(currBlockId);
            do popBlockId();
        }
        return true;
    }

    /* return true on success, false on error */
    method boolean pass1(Item item) {
        var boolean result;
        var VarTable varTable;
        let varTable = VarTable.new();
        let result = pass1rec(varTable, item);
        do varTable.dispose();
        return result;
    }

    /* return value of a constant, variable or function call */
    /* TODO: remove (useless method) */
    method Value evalTerminal(Item item) {
        var String name;
        var integer blockId;
        var Element element;

        if (item.getType() = Const.IDENT()) {
            let name = AstSel.identName(item);
            let blockId = item.getBlockId();
            if (blockId = (-1)) {
                /* unknown (undeclared) identifier error */
                return 0;
            }
            let element = identMap.get(name, blockId);
            if (element.getType() = Const.T_PROCEDURE()) {
                /* procedure call */
                /* TODO */
                return 0;
            } else {
                /* get variable value */
                let element = identMap.get(name, blockId);
                return element.getValue();
            }
        }

        /* return constant value */
        return item.getValue();
    }

    /* executes a procedure call and returns a value if value returned
     * item can be ident OR [call: ident {param}]
     */
    method Value execCall(Item item) {
        var Item ident;
        var List subItems;
        var Item subItem;
        var List params;
        var Value paramValue;

        if (item.getType() = Const.IDENT()) {
            let ident = item;
            let params = 0;
        }

        if (ident.getType() = Const.CALL()) {
            let subItems = item.getSubItems();
            let ident = subItems.get();
            let subItems = subItems.getNext();
            let params = 0;
            while (~(subItems = 0)) {
                let subItem = subItems.get();
                let paramValue = evalExpr(subItem);
                if (params = 0) {
                    let params = List.new(paramValue);
                } else {
                    do params.append(paramValue);
                }
            }
        }

        /* TODO: execute call */
        return 0;
    }

    method Value signValue(boolean sign, integer value) {
        if (~sign) {
            return Value.newInteger(value);
        } else {
            return Value.newInteger(-value);
        }
    }

    /* factor= [ "-" ]  number | string | ident | ( "(" call | expr ")") */
    method Value evalFactor(Item item) {
        var List subItems;
        var Item subItem;
        var boolean sign;
        var String name;
        var Element element;
        var integer blockId;
        var Value val;
        var integer intval;

        /* sign */
        let subItems = item.getSubItems();
        let subItem = subItems.get();
        if (subItem.getType() = Const.CH_MINUS()) {
            let sign = true;
            let subItems = subItems.getNext();
            let subItem = subItems.get();
        } else {
            let sign = false;
        }

        /* number */
        if (subItem.getType() = Const.T_INTEGER()) {
            let intval = subItem.getIntegerValue();
            return signValue(sign, intval);
        }

        /* string */
        if (subItem.getType() = Const.T_STRING()) {
            return subItem.getValue();
        }

        /* ident */
        if (subItem.getType() = Const.IDENT()) {
            let name = AstSel.identName(subItem);
            let blockId = subItem.getBlockId();
            let element = identMap.get(name, blockId);
            if (element.getType() = Const.T_PROCEDURE()) {
                /* procedure call */
                let val = execCall(subItem);
            } else {
                /* variable */
                let val = element.getValue();
            }
            let intval = value.getIntegerValue();
            do val.dispose();
            return signValue(sign, intval);
        }

        /* call-expr */
        if (subItem.getType() = Const.CH_PAROP()) {
            let subItems = subItems.getNext();
            let subItem = subItems.get();
            if (subItem.getType() = Const.CALL()) {
                let val = execCall(subItem);
            }
            if (subItem.getType() = Const.EXPR()) {
                let val = evalExpr(subItem);
            }
            let intval = value.getIntegerValue();
            do val.dispose();
            return signValue(sign, intval);
        }

        return 0;
    }

    /* term = factor { ( "*" | "/" | mod ) factor } */
    method Value evalTerm(Item item) {
        var Value factor;
        var integer op;
        var integer result;
        var List subItems;
        var Item subItem;
        var integer termval;

        let subItems = item.getSubItems();
        let subItem = subItems.get();
        let factor = evalFactor(subItem);

        if (~(factor.getType() = Const.T_INTEGER())) {
            return 0;
        }

        let termval = factor.getIntegerValue();
        do factor.dispose();
        let result = termval;

        let subItems = subItems.getNext();
        while (~(subItems = 0)) {
            let subItem = subItems.get();
            let op = subItem.getType();
            let subItems = subItems.getNext();
            let subItem = subItems.get();
            let factor = evalFactor(subItem);
            if (~(factor.getType() = Const.T_INTEGER())) {
                return 0;
            }

            let termval = factor.getIntegerValue();
            do factor.dispose();
            if (op = Const.CH_STAR()) {
                let result = result * termval;
            }
            if (op = Const.CH_SLASH()) {
                let result = result / termval;
            }
            if (op = Const.KW_MOD()) {
                let result = result - (termval * (result / termval));
            }
            let subItems = subItems.getNext();
        }

        return Value.newInteger(result);
    }

    /* arithm = term {( "+" | "-" ) term } */
    method Value evalArithm(Item item) {
        var Value term;
        var integer op;
        var integer result;
        var List subItems;
        var Item subItem;

        let subItems = item.getSubItems();
        let subItem = subItems.get();
        let term = evalTerm(subItem);

        if (~(term.getType() = Const.T_INTEGER())) {
            return 0;
        }

        let result = term.getIntegerValue();
        do term.dispose();

        let subItems = subItems.getNext();
        while (~(subItems = 0)) {
            let subItem = subItems.get();
            let op = subItem.getType();
            let subItems = subItems.getNext();
            let subItem = subItems.get();
            let term = evalTerm(subItem);

            if (~(term.getType() = Const.T_INTEGER())) {
                return 0;
            }

            if (op = Const.CH_PLUS()) {
                let result = result + term.getIntegerValue();
            }
            if (op = Const.CH_MINUS()) {
                let result = result - term.getIntegerValue();
            }
            do term.dispose();
            let subItems = subItems.getNext();
        }

        return Value.newInteger(result);
    }

    /* log_expr = true | false | (arithm [ rel_op arithm ]) */
    method Value evalLogExpr(Item item) {
        var Value arithm1;
        var integer a1;
        var integer opch1;
        var integer opch2;
        var Value arithm2;
        var integer a2;
        var List subItems;
        var Item subItem;

        let subItems = item.getSubItems();
        let subItem = subItems.get();

        /* test if boolean constant */
        if ((subItem.getType() = Const.B_TRUE())
            | (subItem.getType() = Const.B_FALSE())) {
            return subItem.getValue();
        }

        /* get first arithm */
        let arithm1 = evalArithm(subItem);
        let subItems = subItems.getNext();
        if (subItems = 0) {
            if (arithm1.getType() = Const.T_BOOLEAN()) {
                return arithm1;
            } else {
                return 0;
            }
        }
        if (arithm1.getType() = Const.T_INTEGER()) {
            let a1 = arithm1.getIntegerValue();
            do arithm1.dispose();
        } else {
            return 0;
        }

        /* get first op character */
        let subItems = subItems.getNext();
        let subItem = subItems.get();
        let opch1 = subItem.getType();

        /* get second op character */
        let subItems = subItems.getNext();
        let subItem = subItems.get();
        if ((subItem.getType() = Const.CH_EQUALS())
              | (subItem.getType() = Const.CH_GREATER())) {
            let opch2 = subItem.getType();
        } else {
            let opch2 = 0;
            let subItems = subItems.getNext();
            let subItem = subItems.get();
        }

        /* get second arithm */
        let arithm2 = evalArithm(subItem);
        if (~(arithm2.getType() = Const.T_INTEGER())) {
            return 0;
        }
        let a2 = arithm2.getIntegerValue();
        do arithm2.dispose();

        /* generate result value */
        if (((opch1 = Const.CH_EQUALS()) | (opch2 = Const.CH_EQUALS()))
              & (a1 = a2)) {
            return Value.newBoolean(true);
        }
        
        if (((opch1 = Const.CH_GREATER()) | (opch2 = Const.CH_GREATER()))
              & (a1 > a2)) {
            return Value.newBoolean(true);
        }

        if ((a1 < a2) & (opch1 = Const.CH_LOWER())) {
            return Value.newBoolean(true);
        }

        return Value.newBoolean(false);
    }

    /* returns the value of the expression */
    /* expr = [not] log_expr { (and | or ) expr } */
    method Value evalExpr(Item item) {
        /* TODO */
        return 0;
    }

    method void execAssignment(Item item) {
        /* TODO */
        return;
    }

    method void execDoBlock(Item item) {
        /* TODO */
        return;
    }

    method void execDoIter(Item item) {
        /* TODO */
        return;
    }

    method void execDoWhile(Item item) {
        /* TODO */
        return;
    }

    /* only assignments, calls, exprs and blocks go here */
    method Value execute(Item item) {
        if (item.getType() = Const.ASSIGN()) {
            do execAssignment(item);
            return 0;
        }

        if (item.getType() = Const.CALL()) {
            return execCall(item);
        }

        if (item.getType() = Const.EXPR()) {
            return evalExpr(item);
        }

        if (item.getType() = Const.DO_BLOCK()) {
            do execDoBlock(item);
            return 0;
        }

        if (item.getType() = Const.DO_ITER()) {
            do execDoIter(item);
            return 0;
        }

        if (item.getType() = Const.DO_WHILE()) {
            do execDoWhile(item);
            return 0;
        }
        return 0;
    }

    /* execute method: performs the two passes */
    method Value evaluate(Item item) {
        if (pass1(item)) {
            do AstPrint.item(identMap, item);
            return execute(item);
        } else {
            do Display.printConstln("Pass1 failed.");
            return 0;
        }
    }

    method void dispose() {
        do identMap.dispose();
        do Memory.deAlloc(this);
        return;
    }

}
