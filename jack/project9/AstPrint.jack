class AstPrint {

    /* Class containing functions for printing of AST elements
     * for debug purposes
     */

    /* function {blockId} <name> (<blockId>) */
    function void funDecl(Item funDecl) {
        return;
    }

    /* variable "<name>" (<blockId>): <type> */
    function void varDecl(Item varDecl) {
        var String name;
        var integer blockId;
        var integer type;
        let name = AstSel.varName(varDecl);
        let blockId = varDecl.getBlockId();
        let type = AstSel.varType(varDecl);
        do Display.printConst("variable ");
        do Display.printString(name);
        do Display.printConst(" (");
        do Display.printInt(blockId);
        do Display.printConst("): ");
        do AstPrint.type(type);
        do Display.newline();
        return;
    }
    
    function void block(Item block) {
        if (item.getType() = Const.DO_BLOCK()) {
            do Display.printConstln("do_block");
        }
        if (item.getType() = Const.DO_WHILE()) {
            do Display.printConstln("do_while");
        }
        if (item.getType() = Const.DO_ITER()) {
            do Display.printConstln("do_iter");
        }
        return;
    }

    /* end {<blockId>} <name> */
    function void endStat(Item endStat) {
        var String name;
        var integer blockId;
        do Display.printConst("end {");
        let blockId = endStat.getBlockId();
        do Display.printInt(blockId);
        do Display.printConst("}");
        let name = AstSel.endName(endStat);
        if (~(name = 0)) {
            do Display.printConst(" ");
            do Display.printString(name);
            do name.dispose();
        }
        do Display.newline();
        return;
    }

    /* functions: <name>: func (<function blockId>)
     * variables: <name>: var (<variable blockId>) <type>
     * undefined: <name>: undef
     */
    function void ident(IdentMap identMap, Item ident) {
        var String name;
        var integer blockId;
        var Element element;
        let name = AstSel.identName(ident);
        let blockId = ident.getBlockId();
        do Display.printString(name);
        do Display.printConst(": ");
        if (blockId = (-1)) {
            do Display.printConstln("undef");
            return;
        }
        let element = identMap.get(name, blockId);
        if (element.getType() = Const.T_PROCEDURE()) {
            do Display.printConst("func (");
        } else {
            do Display.printConst("var (");
        }
        do Display.printInt(blockId);
        do Display.printConst(")");
        if (~(element.getType() = Const.T_PROCEDURE())) {
            do Display.printConst(" ");
            do AstPrint.type(element.getType());
        }
        do Display.newline();
        return;
    }    

    /* print an item */
    function void item(IdentMap identMap, Item item) {
        var List subItems;
        if (item.isTerminal()) {
//            do Display.printConstln("term");
            if (item.getType() = Const.IDENT()) {
                do AstPrint.ident(identMap, item);
            }
            return;
        } else {
            if (item.getType() = Const.VAR_DECL()) {
                do AstPrint.varDecl(item);
                return;
            } else {
                if (item.getType() = Const.FUN_DECL()) {
                    do AstPrint.funDecl(item);
                    let subItems = AstSel.funRest(item);
                } else {
                    if (item.getType() = Const.END_STAT()) {
                        do AstPrint.endStat(item);
                    } else {
                        let subItems = item.getSubItems();
                        if (item.getType() = Const.DO_BLOCK()
                          | item.getType() = Const.DO_ITER()
                          | item.getType() = Const.DO_WHILE()) {
                            do AstPrint.block(item);
                        }
                    }
                }
            }
            while (~(subItems = 0)) {
                do AstPrint.item(identMap, subItems.get());
                let subItems = subItems.getNext();
            }
            return;
        }
    }

    function void type(integer type) {
        if (type = Const.T_STRING()) {
            do Display.printConst("string");
        } else {
            if (type = Const.T_INTEGER()) {
                do Display.printConst("integer");
            } else {
                if (type = Const.T_BOOLEAN()) {
                    do Display.printConst("boolean");
                }
            }
        }
        return;
    }
    
}
