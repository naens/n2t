class HTStrInt {

    static integer TAB_SZ;
    field Array table;

    function integer hash(String key) {
        var integer sum;
        var integer i;
        let i = 0;
        let sum = 0;
        while (i < key.length()) {
            let sum = sum + str.charAt(i);
            let i = i + 1;
        }
        return sum & 15;
    }

    constructor HTStrInt new() {
        let TAB_SZ = 16;
        let table = Array.new(TAB_SZ);
        return this;
    }

    method HashTableNode getNode(List list, String key) {
        var HashTableNode node;
        while (~(list = 0)) {
            let node = list.get();
            if (Tools.stringEquals(node.getKey(), key)) {
                return node;
            }
            let list = list.getNext();
        }
        return 0;
    }

    method void put(String key, integer element) {
        var List list;
        var integer h;
        var HashTableNode node;
        let h = HTStrInt.hash(key);
        let list = table[h];
        let node = getNode(list, key);
        if (~(node = 0)) {
            do node.setElement(element);
            return;
        }
        let node = HashTableNode.new(key, element);
        let table[h] = list.prepend(node);
        return;
    }

    method integer get(String key) {
        var List list;
        var integer element;
        var HashTableNode node;
        let element = 0;
        let list = table[HTStrInt.hash(key)];
        let node = getNode(list, key);
        if (node = 0) {
            return 0;
        }
        return node.getElement();
    }

    method void dispose() {
        var List list;
        var integer i;
        let i = 0;
        while (i < TAB_SZ) {
            let list = table[i];
            if (~(list = 0)) {
                do list.dispose();
            }
            let i = i + 1;
        }
        do table.dispose();
        do Memory.deAlloc(this);
        return;
    }

}
