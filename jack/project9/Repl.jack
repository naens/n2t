class Repl {

    field String prompt;

    constructor Repl new() {
        let prompt = "REPL>";
        do Display.newline();
        do Display.printConstln("You are in a REPL!");
        do Display.newline();
        return this;
    }

    method boolean isBlockStat(Item item) {
        if (item = 0) {
            return false;
        }
        if (item.getType() = Const.FUN_STAT()) {
            return true;
        }
        if (item.getType() = Const.DO_BLOCK_STAT()) {
            return true;
        }
        if (item.getType() = Const.DO_WHILE_STAT()) {
            return true;
        }
        if (item.getType() = Const.DO_ITER_STAT()) {
            return true;
        }
        return false;
    }

    method void run() {
        var String line;
        var Tokenizer tokenizer;
        var Item item;
        var Item elseIf;
        var integer depth;
        var Item block;
        var Ifs ifs;
        var Cond cond;
        var Eva eva;
        var Value value;

        let tokenizer = Tokenizer.new();
        let ifs = Ifs.new();
        let eva = Eva.new();
        let depth = 0;

        do Display.printString(prompt);
        let line = Display.readln();
        while (~Tools.stringEquals(line, "quit")) {
//            do Display.printConst("You entered: ");
//            do Display.println(line);
//            do Display.newline();
            do tokenizer.setLine(line);
            let item = LineParser.parseLine(tokenizer); //tokenizer is clean
            if (~(item = 0)) {
//                do Display.printConstln("parsing expression ok");
//                do item.print();
//                do Display.newline();
                if (depth = 0) {
                    if (isBlockStat(item)) {
//                        do Display.printConstln("set depth 1, append");
                        do tokenizer.appendNode(item);
                    } else {
                        if (item.getType() = Const.IF_STAT()) {
//                            do Display.printConstln("IF");
                            let cond = Cond.new(eva.evaluate(item));
                            do ifs.ifCond(cond);
                        } else {
                            if (item.getType() = Const.KW_ELSE()) {
//                                do Display.printConstln("ELSE");
                                do Display.printConstln("else");
                                do ifs.ifReverse();
                            } else {
                                if (item.getType() = Const.ELSE_IF_STAT()) {
//                                    do Display.printConstln("ELSE_IF_STAT");
                                    do Display.printConstln("else");
                                    do ifs.ifReverse();
                                    let elseIf = AstSel.elseIfStatIf(item);
                                    let cond = Cond.new(eva.evaluate(elseIf));
                                    do ifs.ifCond(cond);
                                } else {
                                    if (ifs.checkIfs()) {
                                    /* evaluate expression and print value */
                                        let value = eva.evaluate(item);
//                                        do value.print();
                                    }
                                }
                            }
                        }
                    }
                } else {
//                    do Display.printConstln("depth > 0, append");
                    do tokenizer.appendNode(item);
                    if ((depth = 1) & (item.getType() = Const.END_STAT())) {
//                        do Display.printConstln("set depth 0, parse");
                        let block = ParseLines.parseBlock(tokenizer);
                        if (block = 0) {
                            do Display.printConstln("bad block");
                        }
/*
                         else {
                            do Display.printConst("parsed: ");
                            do block.print();
                            do Display.newline();
                        }
*/
                        if (ifs.checkIfs()) {
                        /* evaluate expression and print value */
//                            do Display.printConstln("evaluate block");
                            let value = eva.evaluate(block);
//                            do value.print();
                        }
                    }
                }
                if (isBlockStat(item)) {
                    let depth = depth + 1;
                 }
                if (item.getType() = Const.END_STAT()) {
                    let depth = depth - 1;
                }
            }

            /* TODO: QUIT/EXIT = command to be interpreted */
            /* TODO
             * If statement, evaluate and print.
             * If variable declaration, add to environment.
             * If function declaration, accumulate declaration until an
             * "END" input, and then evaluate and add to the environment.
             * Functions can be nested.
             * Similar with blocks and conds.
             */
            do line.dispose();
            if (depth = 0) {
                do Display.printString(prompt);
            } else {
                do Display.printConst("DEP");
                do Display.printInt(depth);
                do Display.printConst(">");
            }
            let line = Display.readln();
        }
        do tokenizer.dispose();
        do ifs.dispose();
        do eva.dispose();
        do line.dispose();
        do Display.newline();
        return;
    }

    method void dispose() {
        do prompt.dispose();
        do Memory.deAlloc(this);
        do Display.printConst("REPL Terminated.");
        return;
    }
}
