class Repl {

    field String prompt;

    constructor Repl new() {
        let prompt = "REPL>";
        do Display.newline();
        do Display.printConstln("You are in a REPL!");
        do Display.newline();
        return this;
    }

    method void run() {
        var String line;
        var Tokenizer tokenizer;
        var Item item;
        let tokenizer = Tokenizer.new();
        do Display.printString(prompt);
        let line = Display.readln();
        while (~Tools.stringEquals(line, "quit")) {
            do Display.printConst("You entered: ");
            do Display.println(line);
            do Display.newline();
            do tokenizer.setLine(line);
            let item = Parser.parseLine(tokenizer);
            if (~(item = 0)) {
                do Display.printConstln("parsing expression ok");
                do item.print();
                do Display.newline();
            } else {
                do Display.printConstln("bad expression");
            }

            /* TODO: QUIT/EXIT = command to be interpreted */
            /* TODO
             * If statement, evaluate and print.
             * If variable declaration, add to environment.
             * If function declaration, accumulate declaration until an
             * "END" input, and then evaluate and add to the environment.
             * Functions can be nested.
             * Similar with blocks and conds.
             */
            do line.dispose();
            do Display.printString(prompt);
            let line = Display.readln();
        }
        do tokenizer.dispose();
        do line.dispose();
        do Display.newline();
        return;
    }

    method void dispose() {
        do prompt.dispose();
        do Memory.deAlloc(this);
        do Display.printConst("REPL Terminated.");
        return;
    }

}
