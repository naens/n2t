* Evaluator pass1 tests.

** Description

Tests are grouped by level of complexity.  The first tests are at the
beginning, then they test next levels of complexity.  Each group is does not
add a lot of additional complexity, therefore they sould be executed in
order.

** About pass1
The purpose of the pass1 is to assign block id to variables in statements
and function node reference to functions in statements.

** What must be tested
 * The ability to tell whether an identifier is a function or a variable
 * The ability to tell whether an identifier is declared
 * The ability to search among variables and functions defined in main block
 as well as in subblocks, functions and subfunctions (functions within
 blocks or within other functions)
 * The ability to assign the correct block id and function node to
 identifiers
 * The block ids should be predictable.  Each evaluation should begin with a
 block id divisible by 100, so the last 2 digits must be predictable.

** Order of tests
 * Expressions
 * Assignments
 * Blocks (Do, DoWhile, DoIter)
 * Functions
 * Conditions
 * Block in Functions
 * Functions in Blocks
 * Conditions in Blocks
 * Conditions in Functions
 * Blocks in Blocks
 * Conditions in Conditions
 * Functions in Functions
 * 3-4 level tests
 * Using previously defined Functions

** Output format
 * Function Declarations: function {blockId} <name> (<blockId>)[: <type]
 * Varlable Declarations: variable <name> (<blockId>): <type>
 * Blocks: do_block / do_while / do_iter {<blockId>}
 * End Statement: end {<blockId>} [<name>]
 * Cond: if / else / else-if
 * Identifiers:
    - functions: <name>: func {<blockId>} (<function blockId>) <type>
    - variables: <name>: var (<variable blockId>) <type>
    - undefined: <name>: undef

** Tests
*** Expressions
**** expr1
REPL>5

**** expr2
REPL>a
a: undef

**** expr3
REPL>declare a integer
varibale a (0): integer
REPL>a
a: var (0) integer
REPL>a+a
a: var (0) integer
a: var (0) integer

**** expr4
REPL>a+b
a: var (0) integer
b: undef
REPL>declare b boolean
variable b (0): boolean
REPL>b+2*a
b: var (0) boolean
a: var (0) integer

*** Assignments
**** assign1
REPL>c=a+b
c: undef
a: var (0) integer
b: var (0) boolean

**** assign2
REPL>declare c integer
variable c (0): integer
REPL>c=2*(a-1)/a
c: var (0) integer
a: var (0) integer
a: var (0) integer

*** Functions
**** func1
REPL>declare (f)
DEP1>end f
function {1} f (0)
end {1} f
REPL>f
f: func {1} (0)

**** func2
REPL>declare (g a) boolean
DEP1>declare a integer
DEP1>return not a > c
DEP1>end g
function {2} g (0): boolean
variable a (2): integer
a: var (2) integer
c: var (0) integer
end {2} g
REPL>g a
g: func (0) boolean
a: var (0) integer

**** func3
REPL>declare (h x) string
DEP1>declare x integer
DEP1>declare y integer
DEP1>y=17
DEP1>g (h (x+y))
DEP1>return 'ok'
DEP1>end (3) h
function {3} h (0): string
variable x (3): integer
variable y (3): integer
y: var (3) integer
g: func {2} (0) boolean
h: func {3} (0) string
x: var (3) integer
y: var (3) integer
end {3} h
REPL>declare s string
variable s (0): string
REPL>s = (h (f 15) + a)
s: var (0) string
h: func {3} (0) string
f: func {1} (0) integer
a: var (0) integer

*** Blocks (Do, DoWhile, DoIter)
**** do_block
REPL>declare a integer
variable a (0): integer
REPL>declare b integer
variable b (0): integer
REPL>a=5
a: var (0) integer
REPL>b=50
b: var (0) integer
REPL>do
DEP1>declare b integer
DEP1>b=a+10
DEP1>end
do_block {1}
variable b (1): integer
b: var (1) integer
a: var (0) integer
end {1}
REPL>b=a+1
b: var (0) integer
a: var (0) integer

**** do_while
REPL>declare d integer
variable d (0): integer
REPL>d = 5
d: var (0): integer
REPL>do while d > 0
DEP1>d=d-1
DEP1>end
do_while {1}
d: var (0) integer
d: var (0) integer
d: var (0) integer
end {1}

**** do_iter1
REPL>declare x integer
variable x (0): integer
REPL>declare a integer
variable a (0): integer
REPL>a=0
a: var (0) integer
REPL>do x = 5 to 10
DEP1>a = a + x
DEP1>end
do_iter {1}
x: var (0) integer
a: var (0) integer
a: var (0) integer
x: var (0) integer
end {1}

**** do_iter2
REPL>declare c integer
variable c (0): integer
REPL>declare x integer
variable x (0): integer
REPL>x=2
x: var (0) integer
REPL>c=1
c: var (0) integer
REPL>do c = x * 2 to 40 by 3
DEP1>declare a integer
DEP1>a=c*x
DEP1>x=x+1
DEP1>end
do_iter {1}
c: var (0) integer
x: var (0) integer
variable a (1): integer
a: var (1) integer
c: var (0) integer
x: var (0) integer
x: var (0) integer
x: var (0) integer
end {1}

*** Conditions
**** cond1
REPL>declare a integer
variable a (0): integer
REPL>declare b integer
variable b (0): integer
REPL>declare c integer
variable c (0): integer
REPL>if a > b then
if
a: var (0) integer
b: var (0) integer
REPL>c=a
c: var (0) integer
a: var (0) integer
REPL>else
else
REPL>c=b
c: var (0) integer
b: var (0) integer

**** cond2
REPL>declare a integer
variable a (0): integer
REPL>if true then
if
REPL>a=0
a: var (0) integer
REPL>else if a < 3 then
else
if
a: var (0) integer
REPL>a=1
a: var (0) integer
REPL>else
else
REPL>a=2
a: var (0) integer

*** Block in Functions
**** bif1
REPL>declare a integer
variable a (0): integer
REPL>declare (f)
DEP1>declare b integer
DEP1>do
DEP2>declare c integer
DEP2>b=a+c
DEP1>end
DEP1>end f
function {1} f (0)
variable b (1): integer
do_block {2}
variable c (2): integer
b: var (1) integer
a: var (0) integer
c: var (2) integer
end {2}
end {1} f
REPL>f
f: func {1} (0)

**** bif2
REPL>declare a integer
variable a (0): integer
REPL>declare (mult a b) integer
DEP1>declare a integer
DEP1>declare b integer
DEP1>declare result integer
DEP1>result = 0
DEP1>do while b > 0
DEP2>result = result + a
DEP2>b = b - 1
DEP2>end
DEP1>return result
DEP1>end mult
function {1} mult (0): integer
variable a (1): integer
variable b (1): integer
variable result (1): integer
result: var (1) integer
do_while {2}
b: var (1) integer
result: var (1) integer
result: var (1) integer
a: var (1) integer
b: var (1) integer
b: var (1) integer
end {2}
result: var (1) integer
end {1} mult
REPL>a=7
a: var (0) integer
REPL>mult 3 a
mult: func {1} (0) integer
a: var (0) integer

**** bif3
REPL>declare x integer
variable x (0): integer
REPL>declare y integer
variable y (0): integer
REPL>declare n integer
variable y (0): integer
REPL>x = 5
x: var (0) integer
REPL>y = 10
y: var (0) integer
REPL>declare (f) integer
DEP1>declare i integer
DEP1>declare res integer
DEP1>res = 0
DEP1>do i = x to y
DEP2>res = 2 * res
DEP2>end
DEP1>return res
DEP1>end f
function {1} f (0): integer
variable i (1): integer
variable res (1): integer
res: var (1) integer
do_iter {2}
i: var (1) integer
x: var (0) integer
y: var (0) integer
res: var (1) integer
res: var (1) integer
end {2}
res: var (1) integer
end {1} f
REPL>n = f
n: var (0) integer
f: func {1} (0) integer

*** Functions in Blocks
**** fubl1
REPL>do
DEP1>declare a integer
DEP1>declare (f)
DEP2>a=3
DEP2>end f
DEP1>f
DEP1>a
DEP1>end
do_block {1}
variable a (1): integer
function {2} f (0)
a: var (1): integer
end {2} f
f: func {2} (1)
v: var (1): integer
end {1}
REPL>f
f: undef
REPL>a
a: undef

**** fubl2
REPL>declare i integer
variable i (0): integer
REPL>declare a integer
variable a (0): integer
REPL>a = 0
a: var (0)integer 
REPL>do i = 1 to 5
DEP1>declare (f) integer
DEP2>if a mod i = 3 then
DEP2>a=a+1
DEP2>return a
DEP2>end f
DEP1>a = f
DEP1>end
do_iter {1}
i: var (0) integer
function {2} f (1): integer
if
a: var (0) integer
i: var (0) integer
a: var (0) integer
a: var (0) integer
a: var (0) integer
end {2} f
a: var (0) integer
f: func {2} integer
end {1}

*** Conditions in Blocks
*** Conditions in Functions
*** Blocks in Blocks
*** Conditions in Conditions
*** Functions in Functions
*** Multilevel Tests
