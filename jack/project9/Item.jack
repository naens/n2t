class Item {

    field integer type;
    field boolean terminal;
    field integer blockId;
    field Value value;
    field List subItems;

    constructor Item new() {
        let subItems = 0;
        return this;
    }

    method integer getType() {
        return type;
    }

    method void setTerminal(boolean b) {
        let terminal = b;
        return;
    }

    method boolean isTerminal() {
        return terminal;
    }

    method integer getBlockId() {
        return blockId;
    }

    method void setBlockId(integer i) {
        let blockId = i;
        return;
    }

    method void setType(integer typeValue) {
        let type = typeValue;
        return;
    }

    method String getStringValue() {
        return value.getStringValue();
    }

    method void setStringValue(String string) {
        let value = Value.newString(string);
        return;
    }

    method integer getIntegerValue() {
        return value.getIntegerValue();
    }

    method void setIntegerValue(integer val) {
        let value = Value.newInteger(val);
        return;
    }

    method boolean getBooleanValue() {
        return value.getBooleanValue();
    }

    method void setBooleanValue(boolean b) {
        let value = Value.newBoolean(b);
        return;
    }

    method void addSubItem(Item item) {
        if (subItems = 0) {
            let subItems = List.new(item);
        } else {
            do subItems.append(item);
        }
        return;
    }

    method LIst getSubItems() {
        return subItems;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void printSubItems() {
        var List list;
        var Item item;
        let list = subItems;
        while(~(list = 0)) {
            let item = list.get();
            if (item = 0) {
                do Display.printConst("[ERROR]");
                return;
            }
            do item.print();
            let list = list.getNext();
        }
        return;
    }

    method void print() {
        var String intString;
        if (terminal) {
            if (type = Const.T_INTEGER()) {
                do value.print();
                return;
            }
            if (type = Const.T_STRING()) {
                do Display.printConst("<string:");
                do value.print();
                do Display.printConst(">");
                return;
            }
            if (type = Const.T_BOOLEAN()) {
                do Display.printConst("<boolean:");
                do value.print();
                do Display.printConst(">");
                return;
            }
            if (type = Const.IDENT()) {
//                do Display.printConst("<identifier:");
                do value.print();
//                do Display.printConst(">");
                return;
            }
            if ((type = Const.CH_PAROP()) | (type = Const.CH_PARCL())
                | (type = Const.CH_COMMA()) | (type = Const.CH_EQUALS())
                | (type = Const.CH_PLUS()) | (type = Const.CH_MINUS())
                | (type = Const.CH_SLASH()) | (type = Const.CH_STAR())
                | (type = Const.CH_GREATER()) | (type = Const.CH_LOWER())) {
//                do Display.printConst("<char:");
                do Display.printChar(type);
//                do Display.printConst(">");
                return;
            }   
            if ((type = Const.KW_DECLARE()) | (type = Const.KW_DO())
                | (type = Const.KW_WHILE()) | (type = Const.KW_IF())
                | (type = Const.KW_THEN()) | (type = Const.KW_ELSE())
                | (type = Const.KW_TO()) | (type = Const.KW_BY())
                | (type = Const.KW_END()) | (type = Const.KW_AND())
                | (type = Const.KW_OR()) | (type = Const.KW_NOT()) 
                | (type = Const.KW_MOD()) | (type = Const.KW_RETURN())) {
                do Display.printConst("<keyword:");
                do Display.printString(Keywords.getKeywordString(type));
                do Display.printConst(">");
                return;
            }   
            if ((type = Const.RW_INTEGER()) | (type = Const.RW_STRING())
                | (type = Const.RW_BOOLEAN())) {
                do Display.printConst("<type:");
                do Display.printString(Keywords.getKeywordString(type));
                do Display.printConst(">");
                return;
            }   

            do Display.printConst("<unknown_terminal>");
            return;
        } else {
            if (type = Const.VAR_DECL()) {
                do Display.printConst("(var-decl:");
                do printSubItems();
                do Display.printConst(":var-decl)");
                return;
            }

            if (type = Const.FUN_STAT()) {
                do Display.printConst("(fun-stat:");
                do printSubItems();
                do Display.printConst(":fun-stat)");
                return;
            }

            if (type = Const.FUN_DECL()) {
                do Display.printConst("(fun-decl:");
                do printSubItems();
                do Display.printConst(":fun-decl)");
                return;
            }

            if (type = Const.IF_STAT()) {
                do Display.printConst("(if-stat:");
                do printSubItems();
                do Display.printConst(":if-stat)");
                return;
            }

            if (type = Const.COND()) {
                do Display.printConst("(cond:");
                do printSubItems();
                do Display.printConst(":cond)");
                return;
            }

            if (type = Const.DO_BLOCK_STAT()) {
                do Display.printConst("(do-block-stat:");
                do printSubItems();
                do Display.printConst(":do-block-stat)");
                return;
            }

            if (type = Const.DO_BLOCK()) {
                do Display.printConst("(do-block:");
                do printSubItems();
                do Display.printConst(":do-block)");
                return;
            }

            if (type = Const.DO_WHILE_STAT()) {
                do Display.printConst("(do-while-stat:");
                do printSubItems();
                do Display.printConst(":do-while-stat)");
                return;
            }

            if (type = Const.DO_WHILE()) {
                do Display.printConst("(do-while:");
                do printSubItems();
                do Display.printConst(":do-while)");
                return;
            }

            if (type = Const.DO_ITER_STAT()) {
                do Display.printConst("(do-iter-stat:");
                do printSubItems();
                do Display.printConst(":do-iter-stat)");
                return;
            }

            if (type = Const.DO_ITER()) {
                do Display.printConst("(do-iter:");
                do printSubItems();
                do Display.printConst(":do-iter)");
                return;
            }

            if (type = Const.ASSIGN()) {
                do Display.printConst("(assign:");
                do printSubItems();
                do Display.printConst(":assign)");
                return;
            }

            if (type = Const.END_STAT()) {
                do Display.printConst("(end:");
                do printSubItems();
                do Display.printConst(":end)");
                return;
            }

            if (type = Const.RETURN()) {
                do Display.printConst("(return:");
                do printSubItems();
                do Display.printConst(":return)");
                return;
            }

            if (type = Const.REL_OP()) {
                do printSubItems();
                return;
            }

            if (type = Const.EXPR()) {
                do Display.printConst("{");
                do printSubItems();
                do Display.printConst("} ");
                return;
            }
            if (type = Const.LOG_EXPR()) {
//                do Display.printConst("[*");
                do printSubItems();
//                do Display.printConst("*]");
                return;
            }
            if (type = Const.ARITHM()) {
//                do Display.printConst("[@");
                do printSubItems();
//                do Display.printConst("@]");
                return;
            }
            if (type = Const.TERM()) {
//                do Display.printConst("[&");
                do printSubItems();
//                do Display.printConst("&]");
                return;
            }
            if (type = Const.CALL()) {
                do Display.printConst("[~");
                do printSubItems();
                do Display.printConst("~]");
                return;
            }
            if (type = Const.FACTOR()) {
//                do Display.printConst("[%");
                do printSubItems();
//                do Display.printConst("%]");
                return;
            }
            do Display.printConst("#");
        }
        return;
    }

}
